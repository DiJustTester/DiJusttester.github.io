window.onload = function () {

    console.log("OK");

    var
        body = $("body"),
        screenWidth = body.width(),
        btnStart = $(".btn_start"),
        pointer = $(".bl_drum__pointer"),
        pointerAnimation = "pointer_animation",
        drum = $(".bl_drum"),
        active = "active";

    console.log("screenWidth =" + screenWidth);


    function randomNumberFromRange(min, max) {
        return Math.floor(Math.random() * (max - min + 1) + min);
    }


    $.fn.animateRotate = function (angle, duration, easing, complete) {
        var args = $.speed(duration, easing, complete);
        var step = args.step;
        return this.each(function (i, e) {
            args.complete = $.proxy(args.complete, e);
            args.step = function (now) {
                $.style(e, 'transform', 'rotate(' + now + 'deg)');
                if (step) return step.apply(e, arguments);
            };

            $({deg: 0}).animate({deg: angle}, args);
        });
    };


    btnStart.on("click", function () {

        /// POINTER
        (function () {
            var currentPoiterPositionY = pointer.css('transform').split(',')[5].split('.')[0];
            var currentPoiterPositionX = pointer.css('transform').split(',')[4].split(')')[0];

            pointer.removeClass(pointerAnimation);
            pointer.css({
                transform: 'translateX(-50%) translateY(' + currentPoiterPositionY + 'px)',
                MozTransform: 'translateX(-50%) translateY(' + currentPoiterPositionY + 'px)',
                WebkitTransform: 'translateX(-50%) translateY(' + currentPoiterPositionY + 'px)',
                msTransform: 'translateX(-50%) translateY(' + currentPoiterPositionY + 'px)'
            });

            var pointerPos1 = (screenWidth / (-19.76)), /// -85px
                pointerPos2 = (screenWidth / (-750)); //


            pointer.animate({transform: 'translateX(' + currentPoiterPositionX + ') translateY(' + pointerPos1 + 'px)'}, 300)
                .animate({transform: 'translateX(' + currentPoiterPositionX + ') translateY(' + pointerPos2 + 'px)'}, 300);
        })();

        /// DRUM
        var timeRotate = randomNumberFromRange(800, 1600);
        // var nextAngleOfDrum = randomNumberFromRange(390, 1080);

        var nextAngleOfDrum = 740;

        var angleRemainderOfTheDivision = (nextAngleOfDrum % 360);


        console.log("nextAngleOfDrum = " + nextAngleOfDrum);
        console.log("angleRemainderOfTheDivision = " + angleRemainderOfTheDivision);


        function spinDrum(nextAngleOfDrum) {
            drum.animateRotate(nextAngleOfDrum, timeRotate, 'linear', function () {
            });
        }


        setTimeout(function () {

            switch (true) {
                case (angleRemainderOfTheDivision >= 0 && angleRemainderOfTheDivision <= 45):
                    initializationPopup();
                    break;
                case (angleRemainderOfTheDivision >= 92 && angleRemainderOfTheDivision <= 137):
                    initializationPopup();
                    break;
                case (angleRemainderOfTheDivision >= 180 && angleRemainderOfTheDivision <= 227):
                    initializationPopup();
                    break;
                case (angleRemainderOfTheDivision >= 270 && angleRemainderOfTheDivision <= 318):
                    initializationPopup();
                    break;
                default:
                    //// Попробуй ещё раз
            }

        }, (timeRotate + 600));

        spinDrum(nextAngleOfDrum);

    });

    //// canvasConfetti

    var W = window.innerWidth,
        H = window.innerHeight,
        canvas = document.getElementById("canvas"),
        context = canvas.getContext("2d"),
        maxConfettis = 50,
        particles = [],
        i;

    var possibleColors = [
        "Chocolate",
        "DarkOrange",
        "Orange"
    ];

    function randomFromTo(from, to) {
        return Math.floor(Math.random() * (to - from + 1) + from);
    }

    function confettiParticle() {
        this.x = Math.random() * W; // x
        this.y = Math.random() * H - H; // y
        this.r = randomFromTo(11, 33); // radius
        this.d = Math.random() * maxConfettis + 11;
        this.color =
            possibleColors[Math.floor(Math.random() * possibleColors.length)];
        this.tilt = Math.floor(Math.random() * 33) - 11;
        this.tiltAngleIncremental = Math.random() * 0.07 + 0.05;
        this.tiltAngle = 0;

        this.draw = function () {
            context.beginPath();
            context.lineWidth = this.r / 2;
            context.strokeStyle = this.color;
            context.moveTo(this.x + this.tilt + this.r / 3, this.y);
            context.lineTo(this.x + this.tilt, this.y + this.tilt + this.r / 5);
            return context.stroke();
        };
    }

    function drawConfetti() {
        var results = [];

        // Magical recursive functional love
        requestAnimationFrame(drawConfetti);

        context.clearRect(0, 0, W, window.innerHeight);

        for (i = 0; i < maxConfettis; i++) {
            results.push(particles[i].draw());
        }

        var particle = {};
        var remainingFlakes = 0;
        for (i = 0; i < maxConfettis; i++) {
            particle = particles[i];

            particle.tiltAngle += particle.tiltAngleIncremental;
            particle.y += (Math.cos(particle.d) + 3 + particle.r / 2) / 2;
            particle.tilt = Math.sin(particle.tiltAngle - i / 3) * 15;

            if (particle.y <= H) remainingFlakes++;

            // If a confetti has fluttered out of view,
            // bring it back to above the viewport and let if re-fall.
            if (particle.x > W + 30 || particle.x < -30 || particle.y > H) {
                particle.x = Math.random() * W;
                particle.y = -30;
                particle.tilt = Math.floor(Math.random() * 10) - 20;
            }
        }

        return results;
    }

    window.addEventListener(
        "resize",
        function () {
            W = window.innerWidth;
            H = window.innerHeight;
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        },
        false
    );

    // Push new confetti objects to `particles[]
    for (i = 0; i < maxConfettis; i++) {
        particles.push(new confettiParticle());
    }

    // Initialize
    canvas.width = W;
    canvas.height = H;


  /////// Popup Initialization


    function initializationPopup(){
        $(".confetti_canvas").removeClass("hidden");
        $(".coverLayer").removeClass("hidden");
        $(".bl_popup").removeClass("hidden");
        drawConfetti();
    }




};


